package test.aspect;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;
/*
 * - Aspectj Expression
 * 1. execution(public * *(..)) => 접근 지정자가 public인 메소드가 point cut
 * 2. execution(* test.service.*.*(..))
 * 	  => test.service 패키지의 모든 메소드 point cut
 * 3. execution(public void insert*(..))
 *    => 접근 지정자는 public 리턴 type은 void 이고 메소드명이 insert로
 *    시작하는 모든 메소드가 point cut
 * 4. execution(* delete*(*))
 * 	  => 메소드 명이 delete 로 시작하고 인자로 1개 전달받는 메소드가 point cut
 * 5. execution(* delete*(*.*))
 * 	  => 메소드 명이 delete 로 시작하고 인자로 2개 전달받는 메소드가 point cut
 * 
 */
@Aspect
@Component
public class WritingAspect {
	
	@Before("execution(public void write*(*))")
	public void preparePen(){
		//글을 쓰기 전에 펜을 준비하는 작업
		System.out.println("펜을 준비해서 뚜껑을 열어요");
	}
	
	@After("execution(public void write*())")
	public void endPen(){
		System.out.println("펜의 뚜껑을 닫고 정리를 해요");
	}
	
	@Around("execution(public void *ToTeacher(..))")
	public void aroundPen(){
		
	}
}
